/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-08-31 15:11:34.789918
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5;
x0=IKsin(j[0]);
x1=IKcos(j[0]);
x2=IKcos(j[1]);
x3=IKsin(j[1]);
x4=((0.047)*x0);
x5=((0.047)*x1);
eetrans[0]=((((-0.08)*x0))+(((-1.0)*x2*x4))+((x3*x5)));
eetrans[1]=((0.048)+((x2*x5))+((x3*x4))+(((0.08)*x1)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 2; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x22000008; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,new_px,px,npx,new_py,py,npy;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1];

new_px=px;
new_py=((-0.048)+py);
px = new_px; py = new_py;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=((-1.14481382978723)+(((132.978723404255)*(py*py)))+(((132.978723404255)*(px*px))));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[3];
IkReal x6=py*py;
IkReal x7=px*px;
IkReal x8=((47.0)*sj1);
IkReal x9=((47.0)*cj1);
j0eval[0]=(x7+x6);
j0eval[1]=IKsign(((((1000.0)*x6))+(((1000.0)*x7))));
j0eval[2]=((IKabs((((py*x9))+((px*x8))+(((80.0)*py)))))+(IKabs(((((-1.0)*px*x9))+(((-80.0)*px))+((py*x8))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x10=(px*sj1);
IkReal x11=(cj1*py);
j0eval[0]=((((-1.70212765957447)*py))+(((-1.0)*x11))+x10);
j0eval[1]=IKsign(((((-80.0)*py))+(((47.0)*x10))+(((-47.0)*x11))));
j0eval[2]=((IKabs(((-6.4)+(((-2.209)*(cj1*cj1)))+(((1000.0)*(px*px)))+(((-7.52)*cj1)))))+(IKabs(((((-3.76)*sj1))+(((-2.209)*cj1*sj1))+(((1000.0)*px*py))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
j0eval[0]=((((-1.70212765957447)*px))+(((-1.0)*cj1*px))+(((-1.0)*py*sj1)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x12=px*px;
IkReal x13=((py*py)+x12);
if((x13) < -0.00001)
continue;
IkReal x14=IKabs(IKsqrt(x13));
IkReal x20 = x13;
if(IKabs(x20)==0){
continue;
}
IkReal x15=pow(x20,-0.5);
IkReal x16=(py*x15);
CheckValue<IkReal> x21=IKPowWithIntegerCheck(x14,-1);
if(!x21.valid){
continue;
}
IkReal x17=x21.value;
IkReal x18=((1.70212765957447)*x17);
if((((1.0)+(((-2.89723856948846)*x12*(x17*x17))))) < -0.00001)
continue;
IkReal x19=IKsqrt(((1.0)+(((-2.89723856948846)*x12*(x17*x17)))));
if( ((px*x18)) < -1-IKFAST_SINCOS_THRESH || ((px*x18)) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x22 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x22.valid){
continue;
}
IkReal gconst0=((IKasin((px*x18)))+(((-1.0)*(x22.value))));
IkReal gconst1=((((-1.0)*px*x16*x18))+((px*x15*x19)));
IkReal gconst2=((((-1.0)*x16*x19))+(((-1.0)*x12*x15*x18)));
CheckValue<IkReal> x23 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x23.valid){
continue;
}
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x24=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x24.valid){
continue;
}
if( (((1.70212765957447)*px*(x24.value))) < -1-IKFAST_SINCOS_THRESH || (((1.70212765957447)*px*(x24.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x23.value)+(((-1.0)*(IKasin(((1.70212765957447)*px*(x24.value))))))+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x25=px*px;
IkReal x26=x13;
if((x26) < -0.00001)
continue;
IkReal x27=IKabs(IKsqrt(x26));
IkReal x34 = x26;
if(IKabs(x34)==0){
continue;
}
IkReal x28=pow(x34,-0.5);
IkReal x29=(py*x28);
CheckValue<IkReal> x35=IKPowWithIntegerCheck(x27,-1);
if(!x35.valid){
continue;
}
IkReal x30=x35.value;
IkReal x31=((1.70212765957447)*x30);
if((((1.0)+(((-2.89723856948846)*x25*(x30*x30))))) < -0.00001)
continue;
IkReal x32=IKsqrt(((1.0)+(((-2.89723856948846)*x25*(x30*x30)))));
if( ((px*x31)) < -1-IKFAST_SINCOS_THRESH || ((px*x31)) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x36 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x36.valid){
continue;
}
IkReal x33=((IKasin((px*x31)))+(((-1.0)*(x36.value))));
sj1=gconst1;
cj1=gconst2;
j1=x33;
IkReal gconst0=x33;
IkReal gconst1=(((px*x28*x32))+(((-1.0)*px*x29*x31)));
IkReal gconst2=((((-1.0)*x29*x32))+(((-1.0)*x25*x28*x31)));
IkReal x37=py*py;
IkReal x38=px*px;
j0eval[0]=(x38+x37);
j0eval[1]=IKsign(((((1000.0)*x38))+(((1000.0)*x37))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x39 = IKatan2WithCheck(IkReal(((((-2.209)*gconst1*gconst2))+(((-3.76)*gconst1))+(((1000.0)*px*py)))),IkReal(((-6.4)+(((1000.0)*(px*px)))+(((-7.52)*gconst2))+(((-2.209)*(gconst2*gconst2))))),IKFAST_ATAN2_MAGTHRESH);
if(!x39.valid){
continue;
}
CheckValue<IkReal> x40=IKPowWithIntegerCheck(IKsign(((((-47.0)*gconst2*py))+(((47.0)*gconst1*px))+(((-80.0)*py)))),-1);
if(!x40.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x39.value)+(((1.5707963267949)*(x40.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x41=IKcos(j0);
IkReal x42=IKsin(j0);
IkReal x43=((0.047)*gconst2);
IkReal x44=((1.0)*px);
IkReal x45=((1.0)*py);
IkReal x46=((0.047)*gconst1);
IkReal x47=(py*x41);
evalcond[0]=((((-1.0)*x42*x45))+(((-1.0)*x41*x44))+x46);
evalcond[1]=((-0.08)+(((-1.0)*x42*x44))+(((-1.0)*x43))+x47);
evalcond[2]=(((x41*x46))+(((-1.0)*x42*x43))+(((-1.0)*x44))+(((-0.08)*x42)));
evalcond[3]=((((0.08)*x41))+((x41*x43))+(((-1.0)*x45))+((x42*x46)));
evalcond[4]=((-0.004191)+(((0.16)*x47))+(((-1.0)*py*x45))+(((-0.16)*px*x42))+(((-1.0)*px*x44)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x48=((47.0)*px);
IkReal x49=((47.0)*py);
CheckValue<IkReal> x50=IKPowWithIntegerCheck(IKsign(((((1000.0)*(py*py)))+(((1000.0)*(px*px))))),-1);
if(!x50.valid){
continue;
}
CheckValue<IkReal> x51 = IKatan2WithCheck(IkReal(((((-80.0)*px))+((gconst1*x49))+(((-1.0)*gconst2*x48)))),IkReal((((gconst2*x49))+(((80.0)*py))+((gconst1*x48)))),IKFAST_ATAN2_MAGTHRESH);
if(!x51.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x50.value)))+(x51.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x52=IKcos(j0);
IkReal x53=IKsin(j0);
IkReal x54=((0.047)*gconst2);
IkReal x55=((1.0)*px);
IkReal x56=((1.0)*py);
IkReal x57=((0.047)*gconst1);
IkReal x58=(py*x52);
evalcond[0]=((((-1.0)*x53*x56))+(((-1.0)*x52*x55))+x57);
evalcond[1]=((-0.08)+(((-1.0)*x53*x55))+x58+(((-1.0)*x54)));
evalcond[2]=((((-1.0)*x53*x54))+((x52*x57))+(((-1.0)*x55))+(((-0.08)*x53)));
evalcond[3]=((((0.08)*x52))+((x53*x57))+((x52*x54))+(((-1.0)*x56)));
evalcond[4]=((-0.004191)+(((0.16)*x58))+(((-1.0)*px*x55))+(((-0.16)*px*x53))+(((-1.0)*py*x56)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x59=px*px;
IkReal x60=((py*py)+x59);
IkReal x67 = x60;
if(IKabs(x67)==0){
continue;
}
IkReal x61=pow(x67,-0.5);
if((x60) < -0.00001)
continue;
IkReal x62=IKabs(IKsqrt(x60));
CheckValue<IkReal> x68=IKPowWithIntegerCheck(x62,-1);
if(!x68.valid){
continue;
}
IkReal x63=x68.value;
IkReal x64=((1.70212765957447)*x63);
if((((1.0)+(((-2.89723856948846)*x59*(x63*x63))))) < -0.00001)
continue;
IkReal x65=IKsqrt(((1.0)+(((-2.89723856948846)*x59*(x63*x63)))));
IkReal x66=((1.0)*x61*x65);
if( ((px*x64)) < -1-IKFAST_SINCOS_THRESH || ((px*x64)) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x69 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x69.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(IKasin((px*x64)))))+(((-1.0)*(x69.value))));
IkReal gconst4=((((-1.0)*px*x66))+(((-1.0)*px*py*x61*x64)));
IkReal gconst5=((((-1.0)*x59*x61*x64))+((py*x66)));
CheckValue<IkReal> x70 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x70.valid){
continue;
}
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x71=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x71.valid){
continue;
}
if( (((1.70212765957447)*px*(x71.value))) < -1-IKFAST_SINCOS_THRESH || (((1.70212765957447)*px*(x71.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x70.value)+(IKasin(((1.70212765957447)*px*(x71.value))))+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x72=px*px;
IkReal x73=x60;
IkReal x81 = x73;
if(IKabs(x81)==0){
continue;
}
IkReal x74=pow(x81,-0.5);
if((x73) < -0.00001)
continue;
IkReal x75=IKabs(IKsqrt(x73));
CheckValue<IkReal> x82=IKPowWithIntegerCheck(x75,-1);
if(!x82.valid){
continue;
}
IkReal x76=x82.value;
IkReal x77=((1.70212765957447)*x76);
if((((1.0)+(((-2.89723856948846)*x72*(x76*x76))))) < -0.00001)
continue;
IkReal x78=IKsqrt(((1.0)+(((-2.89723856948846)*x72*(x76*x76)))));
CheckValue<IkReal> x83 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x83.valid){
continue;
}
if( ((px*x77)) < -1-IKFAST_SINCOS_THRESH || ((px*x77)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x79=((((1.0)*(x83.value)))+(((1.0)*(IKasin((px*x77))))));
IkReal x80=((1.0)*x74*x78);
sj1=gconst4;
cj1=gconst5;
j1=((3.14159265)+(((-1.0)*x79)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x79)));
IkReal gconst4=((((-1.0)*px*py*x74*x77))+(((-1.0)*px*x80)));
IkReal gconst5=(((py*x80))+(((-1.0)*x72*x74*x77)));
IkReal x84=py*py;
IkReal x85=px*px;
j0eval[0]=(x84+x85);
j0eval[1]=IKsign(((((1000.0)*x84))+(((1000.0)*x85))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x86=IKPowWithIntegerCheck(IKsign(((((-80.0)*py))+(((-47.0)*gconst5*py))+(((47.0)*gconst4*px)))),-1);
if(!x86.valid){
continue;
}
CheckValue<IkReal> x87 = IKatan2WithCheck(IkReal(((((-3.76)*gconst4))+(((1000.0)*px*py))+(((-2.209)*gconst4*gconst5)))),IkReal(((-6.4)+(((1000.0)*(px*px)))+(((-7.52)*gconst5))+(((-2.209)*(gconst5*gconst5))))),IKFAST_ATAN2_MAGTHRESH);
if(!x87.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x86.value)))+(x87.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x88=IKcos(j0);
IkReal x89=IKsin(j0);
IkReal x90=((1.0)*px);
IkReal x91=((0.047)*gconst5);
IkReal x92=((1.0)*py);
IkReal x93=((0.047)*gconst4);
IkReal x94=(py*x88);
evalcond[0]=(x93+(((-1.0)*x88*x90))+(((-1.0)*x89*x92)));
evalcond[1]=((-0.08)+x94+(((-1.0)*x91))+(((-1.0)*x89*x90)));
evalcond[2]=((((-0.08)*x89))+((x88*x93))+(((-1.0)*x90))+(((-1.0)*x89*x91)));
evalcond[3]=(((x89*x93))+(((0.08)*x88))+((x88*x91))+(((-1.0)*x92)));
evalcond[4]=((-0.004191)+(((0.16)*x94))+(((-0.16)*px*x89))+(((-1.0)*px*x90))+(((-1.0)*py*x92)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x95=((47.0)*gconst5);
IkReal x96=((47.0)*gconst4);
CheckValue<IkReal> x97=IKPowWithIntegerCheck(IKsign(((((1000.0)*(py*py)))+(((1000.0)*(px*px))))),-1);
if(!x97.valid){
continue;
}
CheckValue<IkReal> x98 = IKatan2WithCheck(IkReal((((py*x96))+(((-80.0)*px))+(((-1.0)*px*x95)))),IkReal((((py*x95))+((px*x96))+(((80.0)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x98.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x97.value)))+(x98.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x99=IKcos(j0);
IkReal x100=IKsin(j0);
IkReal x101=((1.0)*px);
IkReal x102=((0.047)*gconst5);
IkReal x103=((1.0)*py);
IkReal x104=((0.047)*gconst4);
IkReal x105=(py*x99);
evalcond[0]=((((-1.0)*x100*x103))+x104+(((-1.0)*x101*x99)));
evalcond[1]=((-0.08)+(((-1.0)*x100*x101))+(((-1.0)*x102))+x105);
evalcond[2]=((((-1.0)*x100*x102))+(((-0.08)*x100))+(((-1.0)*x101))+((x104*x99)));
evalcond[3]=((((0.08)*x99))+((x102*x99))+(((-1.0)*x103))+((x100*x104)));
evalcond[4]=((-0.004191)+(((0.16)*x105))+(((-1.0)*px*x101))+(((-0.16)*px*x100))+(((-1.0)*py*x103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x106=py*py;
IkReal x107=((px*px)+x106);
IkReal x114 = x107;
if(IKabs(x114)==0){
continue;
}
IkReal x108=pow(x114,-0.5);
if((x107) < -0.00001)
continue;
IkReal x109=IKabs(IKsqrt(x107));
CheckValue<IkReal> x115=IKPowWithIntegerCheck(x109,-1);
if(!x115.valid){
continue;
}
IkReal x110=x115.value;
if((((1.0)+(((-2.89723856948846)*x106*(x110*x110))))) < -0.00001)
continue;
IkReal x111=IKsqrt(((1.0)+(((-2.89723856948846)*x106*(x110*x110)))));
IkReal x112=((1.70212765957447)*x108*x110);
IkReal x113=(x108*x111);
CheckValue<IkReal> x116 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x116.valid){
continue;
}
if( (((1.70212765957447)*py*x110)) < -1-IKFAST_SINCOS_THRESH || (((1.70212765957447)*py*x110)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst6=((((-1.0)*(x116.value)))+(IKasin(((1.70212765957447)*py*x110))));
IkReal gconst7=(((py*x113))+((px*py*x112)));
IkReal gconst8=(((px*x113))+(((-1.0)*x106*x112)));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x117=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x117.valid){
continue;
}
if( (((1.70212765957447)*py*(x117.value))) < -1-IKFAST_SINCOS_THRESH || (((1.70212765957447)*py*(x117.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x118 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x118.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(IKasin(((1.70212765957447)*py*(x117.value))))))+(x118.value)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x119=py*py;
IkReal x120=x107;
IkReal x128 = x120;
if(IKabs(x128)==0){
continue;
}
IkReal x121=pow(x128,-0.5);
if((x120) < -0.00001)
continue;
IkReal x122=IKabs(IKsqrt(x120));
CheckValue<IkReal> x129=IKPowWithIntegerCheck(x122,-1);
if(!x129.valid){
continue;
}
IkReal x123=x129.value;
if( (((1.70212765957447)*py*x123)) < -1-IKFAST_SINCOS_THRESH || (((1.70212765957447)*py*x123)) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x130 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x130.valid){
continue;
}
IkReal x124=((IKasin(((1.70212765957447)*py*x123)))+(((-1.0)*(x130.value))));
if((((1.0)+(((-2.89723856948846)*x119*(x123*x123))))) < -0.00001)
continue;
IkReal x125=IKsqrt(((1.0)+(((-2.89723856948846)*x119*(x123*x123)))));
IkReal x126=((1.70212765957447)*x121*x123);
IkReal x127=(x121*x125);
sj1=gconst7;
cj1=gconst8;
j1=x124;
IkReal gconst6=x124;
IkReal gconst7=(((px*py*x126))+((py*x127)));
IkReal gconst8=((((-1.0)*x119*x126))+((px*x127)));
IkReal x131=py*py;
IkReal x132=px*px;
j0eval[0]=(x131+x132);
j0eval[1]=IKsign(((((1000.0)*x132))+(((1000.0)*x131))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x133 = IKatan2WithCheck(IkReal(((-6.4)+(((1000.0)*(py*py)))+(((-2.209)*(gconst8*gconst8)))+(((-7.52)*gconst8)))),IkReal(((((2.209)*gconst7*gconst8))+(((1000.0)*px*py))+(((3.76)*gconst7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x133.valid){
continue;
}
CheckValue<IkReal> x134=IKPowWithIntegerCheck(IKsign(((((47.0)*gconst7*py))+(((80.0)*px))+(((47.0)*gconst8*px)))),-1);
if(!x134.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x133.value)+(((1.5707963267949)*(x134.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x135=IKcos(j0);
IkReal x136=IKsin(j0);
IkReal x137=((0.047)*gconst8);
IkReal x138=((1.0)*px);
IkReal x139=((1.0)*py);
IkReal x140=((0.047)*gconst7);
IkReal x141=(py*x135);
evalcond[0]=((((-1.0)*x135*x138))+x140+(((-1.0)*x136*x139)));
evalcond[1]=((-0.08)+x141+(((-1.0)*x136*x138))+(((-1.0)*x137)));
evalcond[2]=((((-0.08)*x136))+((x135*x140))+(((-1.0)*x136*x137))+(((-1.0)*x138)));
evalcond[3]=(((x136*x140))+((x135*x137))+(((-1.0)*x139))+(((0.08)*x135)));
evalcond[4]=((-0.004191)+(((-1.0)*py*x139))+(((-0.16)*px*x136))+(((-1.0)*px*x138))+(((0.16)*x141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x142=((47.0)*gconst7);
IkReal x143=((47.0)*gconst8);
CheckValue<IkReal> x144 = IKatan2WithCheck(IkReal(((((-1.0)*px*x143))+(((-80.0)*px))+((py*x142)))),IkReal(((((80.0)*py))+((px*x142))+((py*x143)))),IKFAST_ATAN2_MAGTHRESH);
if(!x144.valid){
continue;
}
CheckValue<IkReal> x145=IKPowWithIntegerCheck(IKsign(((((1000.0)*(py*py)))+(((1000.0)*(px*px))))),-1);
if(!x145.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x144.value)+(((1.5707963267949)*(x145.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x146=IKcos(j0);
IkReal x147=IKsin(j0);
IkReal x148=((0.047)*gconst8);
IkReal x149=((1.0)*px);
IkReal x150=((1.0)*py);
IkReal x151=((0.047)*gconst7);
IkReal x152=(py*x146);
evalcond[0]=(x151+(((-1.0)*x147*x150))+(((-1.0)*x146*x149)));
evalcond[1]=((-0.08)+(((-1.0)*x148))+x152+(((-1.0)*x147*x149)));
evalcond[2]=((((-1.0)*x149))+(((-0.08)*x147))+(((-1.0)*x147*x148))+((x146*x151)));
evalcond[3]=((((-1.0)*x150))+(((0.08)*x146))+((x146*x148))+((x147*x151)));
evalcond[4]=((-0.004191)+(((0.16)*x152))+(((-1.0)*py*x150))+(((-1.0)*px*x149))+(((-0.16)*px*x147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x153=py*py;
IkReal x154=((px*px)+x153);
IkReal x161 = x154;
if(IKabs(x161)==0){
continue;
}
IkReal x155=pow(x161,-0.5);
if((x154) < -0.00001)
continue;
IkReal x156=IKabs(IKsqrt(x154));
CheckValue<IkReal> x162=IKPowWithIntegerCheck(x156,-1);
if(!x162.valid){
continue;
}
IkReal x157=x162.value;
if((((1.0)+(((-2.89723856948846)*x153*(x157*x157))))) < -0.00001)
continue;
IkReal x158=IKsqrt(((1.0)+(((-2.89723856948846)*x153*(x157*x157)))));
IkReal x159=((1.70212765957447)*x155*x157);
IkReal x160=((1.0)*x155*x158);
if( (((1.70212765957447)*py*x157)) < -1-IKFAST_SINCOS_THRESH || (((1.70212765957447)*py*x157)) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x163 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x163.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(IKasin(((1.70212765957447)*py*x157)))))+(((-1.0)*(x163.value))));
IkReal gconst10=((((-1.0)*py*x160))+((px*py*x159)));
IkReal gconst11=((((-1.0)*x153*x159))+(((-1.0)*px*x160)));
CheckValue<IkReal> x164 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x164.valid){
continue;
}
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x165=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x165.valid){
continue;
}
if( (((1.70212765957447)*py*(x165.value))) < -1-IKFAST_SINCOS_THRESH || (((1.70212765957447)*py*(x165.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x164.value)+(IKasin(((1.70212765957447)*py*(x165.value))))+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x166=py*py;
IkReal x167=x154;
IkReal x175 = x167;
if(IKabs(x175)==0){
continue;
}
IkReal x168=pow(x175,-0.5);
if((x167) < -0.00001)
continue;
IkReal x169=IKabs(IKsqrt(x167));
CheckValue<IkReal> x176=IKPowWithIntegerCheck(x169,-1);
if(!x176.valid){
continue;
}
IkReal x170=x176.value;
if((((1.0)+(((-2.89723856948846)*x166*(x170*x170))))) < -0.00001)
continue;
IkReal x171=IKsqrt(((1.0)+(((-2.89723856948846)*x166*(x170*x170)))));
IkReal x172=((1.70212765957447)*x168*x170);
if( (((1.70212765957447)*py*x170)) < -1-IKFAST_SINCOS_THRESH || (((1.70212765957447)*py*x170)) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x177 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x177.valid){
continue;
}
IkReal x173=((((1.0)*(IKasin(((1.70212765957447)*py*x170)))))+(((1.0)*(x177.value))));
IkReal x174=((1.0)*x168*x171);
sj1=gconst10;
cj1=gconst11;
j1=((3.14159265)+(((-1.0)*x173)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x173)));
IkReal gconst10=((((-1.0)*py*x174))+((px*py*x172)));
IkReal gconst11=((((-1.0)*px*x174))+(((-1.0)*x166*x172)));
IkReal x178=py*py;
IkReal x179=px*px;
j0eval[0]=(x179+x178);
j0eval[1]=IKsign(((((1000.0)*x178))+(((1000.0)*x179))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x180 = IKatan2WithCheck(IkReal(((((-2.209)*gconst10*gconst11))+(((-3.76)*gconst10))+(((1000.0)*px*py)))),IkReal(((-6.4)+(((-2.209)*(gconst11*gconst11)))+(((1000.0)*(px*px)))+(((-7.52)*gconst11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x180.valid){
continue;
}
CheckValue<IkReal> x181=IKPowWithIntegerCheck(IKsign(((((47.0)*gconst10*px))+(((-47.0)*gconst11*py))+(((-80.0)*py)))),-1);
if(!x181.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x180.value)+(((1.5707963267949)*(x181.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x182=IKcos(j0);
IkReal x183=IKsin(j0);
IkReal x184=((1.0)*px);
IkReal x185=((1.0)*py);
IkReal x186=((0.047)*gconst10);
IkReal x187=((0.047)*gconst11);
IkReal x188=(py*x182);
evalcond[0]=(x186+(((-1.0)*x183*x185))+(((-1.0)*x182*x184)));
evalcond[1]=((-0.08)+(((-1.0)*x187))+x188+(((-1.0)*x183*x184)));
evalcond[2]=((((-1.0)*x184))+(((-0.08)*x183))+(((-1.0)*x183*x187))+((x182*x186)));
evalcond[3]=((((-1.0)*x185))+(((0.08)*x182))+((x183*x186))+((x182*x187)));
evalcond[4]=((-0.004191)+(((-1.0)*py*x185))+(((0.16)*x188))+(((-0.16)*px*x183))+(((-1.0)*px*x184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x189=((47.0)*py);
IkReal x190=((47.0)*px);
CheckValue<IkReal> x191=IKPowWithIntegerCheck(IKsign(((((1000.0)*(py*py)))+(((1000.0)*(px*px))))),-1);
if(!x191.valid){
continue;
}
CheckValue<IkReal> x192 = IKatan2WithCheck(IkReal(((((-80.0)*px))+((gconst10*x189))+(((-1.0)*gconst11*x190)))),IkReal((((gconst11*x189))+(((80.0)*py))+((gconst10*x190)))),IKFAST_ATAN2_MAGTHRESH);
if(!x192.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x191.value)))+(x192.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x193=IKcos(j0);
IkReal x194=IKsin(j0);
IkReal x195=((1.0)*px);
IkReal x196=((1.0)*py);
IkReal x197=((0.047)*gconst10);
IkReal x198=((0.047)*gconst11);
IkReal x199=(py*x193);
evalcond[0]=((((-1.0)*x194*x196))+x197+(((-1.0)*x193*x195)));
evalcond[1]=((-0.08)+(((-1.0)*x194*x195))+(((-1.0)*x198))+x199);
evalcond[2]=(((x193*x197))+(((-1.0)*x194*x198))+(((-1.0)*x195))+(((-0.08)*x194)));
evalcond[3]=(((x193*x198))+(((-1.0)*x196))+(((0.08)*x193))+((x194*x197)));
evalcond[4]=((-0.004191)+(((-1.0)*py*x196))+(((0.16)*x199))+(((-0.16)*px*x194))+(((-1.0)*px*x195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
px=0;
py=0;
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
px=0;
py=0;
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x200=(py*sj1);
IkReal x201=(cj1*px);
CheckValue<IkReal> x202=IKPowWithIntegerCheck(((((-47000.0)*x201))+(((-47000.0)*x200))+(((-80000.0)*px))),-1);
if(!x202.valid){
continue;
}
CheckValue<IkReal> x203=IKPowWithIntegerCheck(((((-80.0)*px))+(((-47.0)*x201))+(((-47.0)*x200))),-1);
if(!x203.valid){
continue;
}
if( IKabs(((x202.value)*(((-2209.0)+(((2209.0)*(cj1*cj1)))+(((1000000.0)*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x203.value)*(((((-3.76)*sj1))+(((-2.209)*cj1*sj1))+(((-1000.0)*px*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x202.value)*(((-2209.0)+(((2209.0)*(cj1*cj1)))+(((1000000.0)*(px*px)))))))+IKsqr(((x203.value)*(((((-3.76)*sj1))+(((-2.209)*cj1*sj1))+(((-1000.0)*px*py))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x202.value)*(((-2209.0)+(((2209.0)*(cj1*cj1)))+(((1000000.0)*(px*px)))))), ((x203.value)*(((((-3.76)*sj1))+(((-2.209)*cj1*sj1))+(((-1000.0)*px*py))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x204=IKcos(j0);
IkReal x205=IKsin(j0);
IkReal x206=((0.047)*cj1);
IkReal x207=((1.0)*px);
IkReal x208=((0.047)*sj1);
IkReal x209=((1.0)*py);
IkReal x210=(py*x204);
evalcond[0]=((((-1.0)*x204*x207))+x208+(((-1.0)*x205*x209)));
evalcond[1]=((-0.08)+(((-1.0)*x206))+x210+(((-1.0)*x205*x207)));
evalcond[2]=((((-1.0)*x207))+((x204*x208))+(((-1.0)*x205*x206))+(((-0.08)*x205)));
evalcond[3]=(((x205*x208))+(((-1.0)*x209))+((x204*x206))+(((0.08)*x204)));
evalcond[4]=((-0.004191)+(((-1.0)*px*x207))+(((-1.0)*py*x209))+(((0.16)*x210))+(((-0.16)*px*x205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x211 = IKatan2WithCheck(IkReal(((((-3.76)*sj1))+(((-2.209)*cj1*sj1))+(((1000.0)*px*py)))),IkReal(((-6.4)+(((-2.209)*(cj1*cj1)))+(((1000.0)*(px*px)))+(((-7.52)*cj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x211.valid){
continue;
}
CheckValue<IkReal> x212=IKPowWithIntegerCheck(IKsign(((((47.0)*px*sj1))+(((-80.0)*py))+(((-47.0)*cj1*py)))),-1);
if(!x212.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x211.value)+(((1.5707963267949)*(x212.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x213=IKcos(j0);
IkReal x214=IKsin(j0);
IkReal x215=((0.047)*cj1);
IkReal x216=((1.0)*px);
IkReal x217=((0.047)*sj1);
IkReal x218=((1.0)*py);
IkReal x219=(py*x213);
evalcond[0]=(x217+(((-1.0)*x213*x216))+(((-1.0)*x214*x218)));
evalcond[1]=((-0.08)+x219+(((-1.0)*x214*x216))+(((-1.0)*x215)));
evalcond[2]=(((x213*x217))+(((-0.08)*x214))+(((-1.0)*x214*x215))+(((-1.0)*x216)));
evalcond[3]=(((x214*x217))+((x213*x215))+(((0.08)*x213))+(((-1.0)*x218)));
evalcond[4]=((-0.004191)+(((-1.0)*py*x218))+(((-1.0)*px*x216))+(((-0.16)*px*x214))+(((0.16)*x219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x220=((47.0)*sj1);
IkReal x221=((47.0)*cj1);
CheckValue<IkReal> x222 = IKatan2WithCheck(IkReal((((py*x220))+(((-80.0)*px))+(((-1.0)*px*x221)))),IkReal((((py*x221))+((px*x220))+(((80.0)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x222.valid){
continue;
}
CheckValue<IkReal> x223=IKPowWithIntegerCheck(IKsign(((((1000.0)*(py*py)))+(((1000.0)*(px*px))))),-1);
if(!x223.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x222.value)+(((1.5707963267949)*(x223.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x224=IKcos(j0);
IkReal x225=IKsin(j0);
IkReal x226=((0.047)*cj1);
IkReal x227=((1.0)*px);
IkReal x228=((0.047)*sj1);
IkReal x229=((1.0)*py);
IkReal x230=(py*x224);
evalcond[0]=((((-1.0)*x224*x227))+(((-1.0)*x225*x229))+x228);
evalcond[1]=((-0.08)+(((-1.0)*x225*x227))+x230+(((-1.0)*x226)));
evalcond[2]=(((x224*x228))+(((-1.0)*x225*x226))+(((-0.08)*x225))+(((-1.0)*x227)));
evalcond[3]=(((x224*x226))+((x225*x228))+(((0.08)*x224))+(((-1.0)*x229)));
evalcond[4]=((-0.004191)+(((-0.16)*px*x225))+(((-1.0)*py*x229))+(((-1.0)*px*x227))+(((0.16)*x230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "6b24b479cb416b31f9ca7a2d564f5bdd"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
